%% File : rpi_sfun_betalink.tlc
%% Created : Fri Jul 02 16:59:44 2021
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "rpi_sfun_betalink.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  rpi_sfun_betalink "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "rpi_sfun_betalink_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void rpi_sfun_betalink_Start_wrapper_accel(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);
    SFB_EXTERN_C void rpi_sfun_betalink_Outputs_wrapper_accel(const real_T *throttle,
			real_T *timestamp,
			real_T *rpm,
			real_T *inv,
			real_T *acc,
			real_T *gyr,
			real_T *mag,
			real_T *roll,
			real_T *pitch,
			real_T *yaw,
			real_T *bat_volt,
			real_T *bat_amp,
			real_T *bat_mah,
			const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);
    SFB_EXTERN_C void rpi_sfun_betalink_Terminate_wrapper_accel(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "rpi_sfun_betalink_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void rpi_sfun_betalink_Start_wrapper(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);
    extern void rpi_sfun_betalink_Outputs_wrapper(const real_T *throttle,
			real_T *timestamp,
			real_T *rpm,
			real_T *inv,
			real_T *acc,
			real_T *gyr,
			real_T *mag,
			real_T *roll,
			real_T *pitch,
			real_T *yaw,
			real_T *bat_volt,
			real_T *bat_amp,
			real_T *bat_mah,
			const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);
    extern void rpi_sfun_betalink_Terminate_wrapper(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);
    void rpi_sfun_betalink_Start_wrapper_accel(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1){
    rpi_sfun_betalink_Start_wrapper(rpi_Ts, p_width0,
			usb_serial_number, p_width1);
    }
    void rpi_sfun_betalink_Outputs_wrapper_accel(const real_T *throttle,
			real_T *timestamp,
			real_T *rpm,
			real_T *inv,
			real_T *acc,
			real_T *gyr,
			real_T *mag,
			real_T *roll,
			real_T *pitch,
			real_T *yaw,
			real_T *bat_volt,
			real_T *bat_amp,
			real_T *bat_mah,
			const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1){
    rpi_sfun_betalink_Outputs_wrapper(throttle,
			timestamp,
			rpm,
			inv,
			acc,
			gyr,
			mag,
			roll,
			pitch,
			yaw,
			bat_volt,
			bat_amp,
			bat_mah,
			rpi_Ts, p_width0,
			usb_serial_number, p_width1);
    }
    void rpi_sfun_betalink_Terminate_wrapper_accel(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1){
    rpi_sfun_betalink_Terminate_wrapper(rpi_Ts, p_width0,
			usb_serial_number, p_width1);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void rpi_sfun_betalink_Start_wrapper(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);

    extern void rpi_sfun_betalink_Outputs_wrapper(const real_T *throttle,
			real_T *timestamp,
			real_T *rpm,
			real_T *inv,
			real_T *acc,
			real_T *gyr,
			real_T *mag,
			real_T *roll,
			real_T *pitch,
			real_T *yaw,
			real_T *bat_volt,
			real_T *bat_amp,
			real_T *bat_mah,
			const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);

    extern void rpi_sfun_betalink_Terminate_wrapper(const real_T *rpi_Ts, const int_T p_width0,
			const real_T *usb_serial_number, const int_T p_width1);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_betalink_Start_wrapper_accel(%<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %else
    rpi_sfun_betalink_Start_wrapper(%<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign py6 = LibBlockOutputSignalAddr(6, "", "", 0)
  %assign py7 = LibBlockOutputSignalAddr(7, "", "", 0)
  %assign py8 = LibBlockOutputSignalAddr(8, "", "", 0)
  %assign py9 = LibBlockOutputSignalAddr(9, "", "", 0)
  %assign py10 = LibBlockOutputSignalAddr(10, "", "", 0)
  %assign py11 = LibBlockOutputSignalAddr(11, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_betalink_Outputs_wrapper_accel(%<pu0>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>, %<py10>, %<py11>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %else
    rpi_sfun_betalink_Outputs_wrapper(%<pu0>, %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<py6>, %<py7>, %<py8>, %<py9>, %<py10>, %<py11>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %endif

  %%
%endfunction

%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    rpi_sfun_betalink_Terminate_wrapper_accel(%<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %else
    rpi_sfun_betalink_Terminate_wrapper(%<pp1>, %<param_width1>, %<pp2>, %<param_width2>);
  %endif

%endfunction

%% [EOF] rpi_sfun_betalink.tlc

